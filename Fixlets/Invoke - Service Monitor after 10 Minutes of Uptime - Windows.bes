<?xml version="1.0" encoding="UTF-8"?>

<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Fixlet>
		<Title>Invoke - Service Monitor after 10 Minutes of Uptime - Windows</Title>
		<Description><![CDATA[<P>This Fixlet will start any stopped services defined as being, "Monitored" by the BES Agent.</P>
<P>To define a service as, "Monitored" for use by this fixlet:</P>
<OL>
<LI>Create a client setting: besservicemonitor-&lt;name&gt; 
<LI>Populate the setting with a semicolon separated list of services to monitor: "<FONT size=2>BESProxyAgent;BESRelay;BESGather;BESPluginService;BESRootServer;BESWebReportsServer"</FONT></LI></OL>
<P><FONT size=2>This action will then check those services to make sure they are running.</FONT></P>
<P>For general information or to report issues with C3 Inventory content please visit GitHub here: <A href="https://github.com/strawgate/C3-Inventory">https://github.com/strawgate/C3-Inventory</A></P>]]></Description>
		<Relevance>windows of operating system</Relevance>
		<Relevance><![CDATA[uptime of operating system > 10 * Minute]]></Relevance>
		<Relevance>exists settings whose (name of it starts with "besservicemonitor-") of client</Relevance>
		<Relevance>exists ((it as trimmed string) of substrings separated by ";" of concatenations ";" whose (it != "") of values of settings whose (name of it starts with "besservicemonitor-") of client) whose (exists (service it) whose (state of it != "Running" and start type of it != "disabled"))</Relevance>
		<Category>Service Monitor</Category>
		<Source>Internal</Source>
		<SourceID></SourceID>
		<SourceReleaseDate>2016-10-25</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<Domain>BESC</Domain>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to start any stopped services.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell">parameter "PowerShellExe"="{ pathname of file ((it as string) of value "Path" of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell" of native registry) }"

parameter "Services"="{concatenations ";" whose (it != "") of unique values of ((it as trimmed string) of substrings separated by ";" of concatenations ";" whose (it != "") of values of settings whose (name of it starts with "besservicemonitor-") of client) whose (exists (service it) whose (state of it != "Running" and start type of it != "disabled"))}"

delete Start-Service.ps1
delete __createfile

createfile until _end_
param (
    $ServicesList,
    $Timestamp
)

new-item -Path "HKLM:\Software\C3 Inventory" -ErrorAction SilentlyContinue

foreach ($Service in $ServicesList.Split(';')) {{
    start-service $Service

    new-item -Path "HKLM:\Software\C3 Inventory\Service Monitoring" -ErrorAction SilentlyContinue
    
    new-item -Path "HKLM:\Software\C3 Inventory\Service Monitoring\$Service" -ErrorAction SilentlyContinue
 
    $Count = (Get-ItemProperty -Path "HKLM:\Software\C3 Inventory\Service Monitoring\$Service" -Name "Count" -ErrorAction SilentlyContinue).Count

    if (!$Count) {{$Count = 0}

    set-ItemProperty -Path "HKLM:\Software\C3 Inventory\Service Monitoring\$Service" -Name "Count" -Value ($Count + 1) -ErrorAction SilentlyContinue

    Set-ItemProperty -Path "HKLM:\Software\C3 Inventory\Service Monitoring\$Service" -Name "Last" -Value $Timestamp -ErrorAction SilentlyContinue
    
}

_end_

move __createfile Start-Service.ps1

waithidden "{parameter "PowershellExe"}" -ExecutionPolicy Bypass -File "Start-Service.ps1" -ServicesList "{parameter "Services"}" -Timestamp "{now}"
</ActionScript>
		</DefaultAction>
	</Fixlet>
</BES>
