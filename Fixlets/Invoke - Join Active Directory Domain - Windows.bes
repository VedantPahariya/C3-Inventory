<?xml version="1.0" encoding="UTF-8"?>

<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Fixlet>
		<Title>Invoke - Join Active Directory Domain - Windows</Title>
		<Description><![CDATA[<DIV id=fixletMessage2 class=FixletMessage>
<DIV id=paramFixletDescription>
<P>Securely Domain Join a Windows Computer!</P><script>
loaded = false;
var CODE_SITE_NAME = 'BES Support' ; 
function loadScript (siteName, callback) {
loaded = false;
var relevanceQuery ='( value of it) of (mime fields of (bes fixlets whose ( name of it = "Parameterized Fixlet Library" and  name of site of it = \"' + siteName + '\" ))) whose (name of it = "vrt_utils.js")'
var code = EvaluateRelevance(relevanceQuery);
var head = document.getElementsByTagName("head")[0]; 
var script   = document.createElement("script");
script.type  = "text/javascript";
script.text = code;
head.appendChild(script);
callback();
}
function scriptLoaded(){
if (!loaded){ 	
if ( typeof FixletUtils !== 'undefined') {
loaded = true;
/*
* Pleas Note: The following code will be moved to library with next publish of lib and user will have to only call method 	
*/
var relQuery = "(messages of it) of bes fixlets whose (name of it = \"Parameterized Fixlet Library\" and ((name of it ) of site of it = \"" + CODE_SITE_NAME +"\" ))";
var messages = EvaluateRelevance(relQuery);
var regex = /\s*<DIV id=globalizationMessageDiv  style="display:none;">([\x00-\x7F]+)\s*<\/Div>/i;
var matches = regex.exec(messages);
matches[1]=matches[1].replace(/<br>/gi,"");
eval(matches[1]);
FixletUtils.initFixletRender();
} } } 	
loadScript(CODE_SITE_NAME, scriptLoaded);
</script> 
<DIV class=FixletProperty></DIV></DIV></DIV>]]></Description>
		<Relevance>windows of operating system</Relevance>
		<Relevance>string value of select "Domain from Win32_ComputerSystem" of wmi = "WORKGROUP"</Relevance>
		<Category></Category>
		<Source></Source>
		<SourceID></SourceID>
		<SourceReleaseDate>2016-05-07</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<MIMEField>
			<Name>parametermetadatatag</Name>
			<Value>{    "Section1":{       "Name":"ADConfiguration",       "Title":"AD Configuration",       "UIType":"accordion",       "Values":[          {             "Name":"ADDomain",             "Title":"Active Directory Domain",             "Description":"Active Directory Domain",             "Override":"True",             "ValueType":"relevance",             "UIType":"Select",             "Values":"unique values of (concatenations \".\" of substrings separated by \",DC=\" of following texts of firsts \"DC=\" of it) whose (it != \"\") of values of results from (bes property \"Active Directory Path\") of bes computers"          },          {             "Name":"ADUser",             "Title":"Active Directory Account Username",             "Description":"Active Directory Account Username",             "UIType":"TextBox",             "Default":"NetBIOS\\Username"          },          {             "Name":"ADpwd",             "Title":"Active Directory Account Password",             "Description":"Active Directory Account Password",             "UIType":"Textbox",             "Encrypt":"true",             "SubUIType":"Password"          },          {             "Name":"ADOU",             "Title":"Active Directory Organizational Unit",             "Description":"Active Directory Organizational Unit",             "Override":"True",             "ValueType":"relevance",             "UIType":"Select",             "Values":"unique values of (concatenations \";\" of substrings separated by \",\" of it) of following texts of firsts \",\" of values of results from (bes property \"Active Directory Path\") of bes computers"          }       ]    } }</Value>
		</MIMEField>
		<Domain>BESC</Domain>
		<Action ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell">
parameter "PowerShellExe"="{ pathname of file ((it as string) of value "Path" of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell" of native registry) }"

delete __createfile
delete powershell.ps1

createfile until _end_
param (
	$Username,
	$Password
)

$domain = "{parameter "ADDomain" of action}"
$OU = "{(concatenations "," of substrings separated by ";" of it) of parameter "ADOU" of action}"

$password = $Password | ConvertTo-SecureString -asPlainText -Force
$credential = New-Object System.Management.Automation.PSCredential($username,$password)

#Try Domain Join with OU -- will fail if object already exists
Add-Computer -DomainName $domain -Credential $credential -OUPath $OU -force -ErrorAction silentlycontinue

#Try Domain Join without OU
Add-Computer -DomainName $domain -Credential $credential -force
_end_

move __createfile powershell.ps1

waithidden "{parameter "PowershellExe"}" -ExecutionPolicy Bypass -File powershell.ps1 -Username "{parameter "ADUser" of action}" -Password "{parameter "ADPwd" of action}"</ActionScript>
			<SuccessCriteria Option="RunToCompletion"></SuccessCriteria>
		</Action>
	</Fixlet>
</BES>
